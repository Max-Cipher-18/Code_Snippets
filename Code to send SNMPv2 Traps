import org.snmp4j.*;
import org.snmp4j.mp.MPv2c;
import org.snmp4j.smi.*;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.event.SnmpListener;
import org.snmp4j.smi.OID;

public class SNMPv2TrapSender {

    public static void main(String[] args) {
        try {
            // 1️⃣ Initialize Transport Layer
            TransportMapping<UdpAddress> transport = new DefaultUdpTransportMapping();
            Snmp snmp = new Snmp(transport);
            transport.listen();

            // 2️⃣ Create SNMP Target
            Address targetAddress = GenericAddress.parse("udp:127.0.0.1/162"); // SNMP manager IP & port
            CommunityTarget target = new CommunityTarget();
            target.setAddress(targetAddress);
            target.setCommunity(new OctetString("public")); // Community string
            target.setVersion(SnmpConstants.version2c);
            target.setTimeout(3000);
            target.setRetries(2);

            // 3️⃣ Create PDU (Trap Message)
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(SnmpConstants.sysUpTime, new TimeTicks(10000))); // System Uptime
            pdu.add(new VariableBinding(SnmpConstants.snmpTrapOID, new OID("1.3.6.1.2.1.1.6"))); // OID for the Trap
            pdu.add(new VariableBinding(SnmpConstants.snmpTrapAddress, new IpAddress("127.0.0.1"))); // Source IP

            // Custom OID Value (Example: Device Temperature Alert)
            pdu.add(new VariableBinding(new OID("1.3.6.1.4.1.1000.1"), new OctetString("Overheat Alert!")));

            pdu.setType(PDU.TRAP);

            // 4️⃣ Send the Trap
            System.out.println("Sending SNMPv2 Trap...");
            snmp.send(pdu, target);

            // 5️⃣ Close SNMP Session
            snmp.close();
            System.out.println("Trap Sent Successfully!");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
