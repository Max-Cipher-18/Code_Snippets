Problem - My project - FirewallInspector has 2 modules - Collection-Collector and Firewall-Tester.
So, there are 3 pom.xml files.
Now, there's a Configuration file in Collection-Collector, which I'm trying to use in Firewall-Tester.
To do this, I have added the dependency in pom.xml of Firewall-Tester.
Still, I'm getting package does not exist ERROR for the Configuration file 

Solution-
Certainly, let's dive into and explain how to use attached artifacts as dependencies for another module within your Maven multi-module project with a detailed example.

Scenario: In your multi-module Maven project, you have two modules: child1 and child2. You want to use the output (attached artifact) of child1 as a dependency in child2.

Step-by-Step Explanation:
1. Configure child1 to Produce an Attached Artifact:
In the pom.xml of the child1 module, configure it to produce an attached artifact. For example, you may want child1 to generate a custom JAR file:
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.2.0</version>
            <executions>
                <execution>
                    <goals>
                        <goal>jar</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <classifier>custom</classifier> <!-- Attach the JAR with a classifier -->
            </configuration>
        </plugin>
    </plugins>
</build>
This configuration instructs Maven to create an additional JAR file (classified as "custom") during the package phase.

2. Build the child1 Module:
Build the child1 module to generate the attached artifact (the custom JAR). You can use the following Maven command from the project's root directory:
mvn clean install
The custom JAR file is generated in the target directory of the child1 module.

3. Configure child2 to Use the Attached Artifact:
In the pom.xml of the child2 module, add a dependency to the child1 module and specify the classifier for the attached artifact:
<dependencies>
    <dependency>
        <groupId>com.example</groupId> <!-- Replace with the actual groupId -->
        <artifactId>child1</artifactId>
        <version>1.0.0</version>
        <classifier>custom</classifier> <!-- Specify the classifier used in the attached artifact -->
    </dependency>
</dependencies>
Here, child2 is configured to use the custom JAR generated by child1 as a dependency.

4. Use the Attached Artifact in child2:
In the code of child2, you can now import and use classes or resources from the attached artifact (the custom JAR). For example:
import com.example.custom.ClassFromChild1;

public class MyService {
    public void doSomething() {
        ClassFromChild1 instance = new ClassFromChild1();
        // Use the instance as needed
    }
}

You can now utilize classes from child1 within child2 as if they were part of the same module.

By following these steps, you can configure one module to produce an attached artifact and use it as a dependency in another module, allowing you to share code or resources between modules in your multi-module Maven project.


Additional Question - Do I need build-helper-maven-plugin to perform the above task?
No, you do not need the build-helper-maven-plugin to attach and use attached artifacts as dependencies within your multi-module Maven project. The build-helper-maven-plugin is typically used for attaching custom artifacts or performing other build-related tasks, but it's not necessary for using attached artifacts as dependencies between modules.

In the example I provided earlier, the build-helper-maven-plugin was used to attach a custom JAR as an artifact with a classifier in the child1 module. This can be useful when you have a specific need to produce and attach custom artifacts.

If your goal is simply to use the attached artifacts from one module as dependencies in another module, you can achieve this by configuring the module that produces the artifact to do so, as shown in Step 1, and then adding a dependency to the other module that wants to use that artifact, as shown in Step 3.

The steps outlined in my previous response do not rely on the build-helper-maven-plugin. You can use attached artifacts as dependencies between modules without it.

