class TestConnectivityObject{
	private String srcHost;
	private String destHost;
	private String destPort;

	// Constructors & Getter
	// Equals and HashCode
	// ToString methods
}

class Result{
	String sourceEntityType;
	String sourceEntityValue;
	String sourceEntityIP;
	String destinationUrl;
	String destinationIP;
	String destinationPort;
	String networkbotResult;
	boolean requiresLegacyTicket;
	String tcpTestResult;
	String parallelTestResult;
	Date lastTestTime;
	String tmdOrder;
	String starTicket;
	Date eta;
	Date executionDate;
	
	// Constructors & Getter
	// Equals and HashCode
	// ToString methods
}

=====================================================================================================================
class TestResultsMongoRepository {
	private final MongoOperations mongoOperations;
	
	public TestResultsMongoRepository (MongoOperations mongoOperations){
		this.mongoOperations = mongoOperations;
	}

	public void saveAll(Collection<Result> objectsToSave){
		BulkOperations bulkOps = mongoOperations.bulkOps(BulkMode.UNORDERED, Result.class);
		
		for (Result dbo : objectsToSave) {
			bulkOps.insert(dbo);
		}
		BulkWriteResult bulkWriteResult = bulkOps.execute();
	}
}

=====================================================================================================================
class TestResultsUpdateService{

	private final TestResultsMongoRepository testResultsMongoRepository;
	private final int writeBatchSize;
	
	public TestResultsUpdateService(TestResultsMongoRepository testResultsMongoRepository, int writeBatchSize){
		this.testResultsMongoRepository = testResultsMongoRepository;
		this.writeBatchSize = writeBatchSize;
	}

	public void saveTestResults(Map<TestConnectivityObject, Result> resultMap){
		List<Result> testResultDBOList = new LinkedList<>();

		for (Map.Entry<TestConnectivityObject, Result> resultEntry : resultMap.entrySet()){
			Result result = resultEntry.getValue();
			
			testResultDBOList.add(result);	
		}

		for (int start = 0; start < testResultDBOList.size(); start += writeBatchSize){
			int end = min(testResultDBOList.size(), start + writeBatchSize);
			testResultsMongoRepository.saveAll(testResultDBOList.subList(start, end));
		}	
	}
}
